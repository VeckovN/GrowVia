//We have one repo "growvia" with all microservices 
//MONOREPO Jenkins 



//namespace that Pods use
namespace = "production" 
serviceName = 'growvia-authentication' //authentication Pod name
service = "Growvia Authentication" //service name for slack notification
//Repo = https://github.com/VeckovN/GrowVia.git
microservicesRoot = 'server/microservices' //path to the aservices in monorep(Growvia)


//create pipeline and create agent ('Jenkins-Agent' that we created in Jenkins dashboard)
pipeline {
    agent {
        //Name of agent (from "Labels" in "Jenkins-AGent" configuration)
        label 'Jenkins-Agent'
    }

    tools {
        //The vallue is "Name" from ManageJEnkins > Tools :NodeJS installations
        nodejs 'NodeJS'  //The vallue is "Name" from ManageJEnkins > Tools :NodeJS installations
        dockerTool 'Docker' //Name from Tool Configuration as well
    }

    //env properties that we'll use in different stages('build','test','deploy')
    environment {
        //To get Docker credentials we'll use method credentials() - one of the docker plugins method
        DOCKER_CREDENTIALS = credentials("dockerhub") //In ManageJenkins->Credentials we got 'dockerhub'
        //the service image that we want to push in dockerHub 
        IMAGE_NAME = "veckovn/growvia-authentication" 
        //The BUILD_NUMBER is envinronemnt variable from Jenkins
        IMAGE_TAG = "stable-${BUILD_NUMBER}"

    }

    stages {
        //Cleanup workspace before any actual build
        //Try only this state to check is jenkins setup correctly
        stage("Cleanup Workspace"){
            steps {
                //This is Jenkins method for cleaning workspace
                cleanWs()
            }
        }

        // stage("Prepare Environment") {
        //     //git package is default installed in Jenkins (we can use git commands 'branch', 'push' etc.)
        //     //uGo in github and find authentication service repository
        //     //But i have Growvia repos there the autnetication service is folder in That repo (NOT SEPERATED REPOSITORY)
        //     //I DON"T HAVE 'authenitaction' REPO
        //     steps {
        //         //I DON"T HAVE 'authenitaction' REPO
        //         // git branch: 'main', credentials: 'github', url; "REPO OF 'authentication' BUT I HAVE WHOLE PROJECT REPO 'Growvia' THAT HAS SERVICES AS FOLDERS NOT REPOS"
                
        //         //So I'll clone whole "Growvia" Repo (that contain 'authentication' service folder(not repo))
        //         git branch: 'main', credentials: 'github', url; 'https://github.com/VeckovN/GrowVia.git'
            
        //         //NOW WE"RE IN /Growvia repo(folder)

        //         // // Load shared Groovy scripts from monorepo's jenkins-automation dir
        //         // dir("${microservicesRoot}/jenkins-automation") {  // Assuming functions.groovy lives here
        //         dir('server/microservices/jenkins-automation') {  // Assuming functions.groovy lives here
        //             script {
        //                 groovyMethods = load("functions.groovy")
        //             }
        //         }

        //         //Navigate to service directory
        //         //dir("${microservicesRoot}/authentication") {
        //         dir('server/microservices/authentication') {
        //             sh 'npm install'
        //         }
        //     }
        // }


        //  //Run linter to check code quality
        // stage("Lint Check") {
        //     steps {
        //         dir('server/microservices/authentication') {
        //             sh 'npm run lint:check'  // run scrip lint:chekc -> ESLint or similar
        //         }
        //     }
        // }

        // stage("Code Format Check") {
        //     steps {
        //         dir('server/microservices/authentication') {
        //             sh 'npm run prettier:check'  // Prettier formatting check
        //         }
        //     }
        // }

        // //Execute unit tests 
        // //THe jenkins will execute unit test before pushing to the docker and github as well
        // stage("Unit Test") {
        //     steps {
        //         dir(serviceDir) {
        //             sh 'npm run test'  // Jest/Mocha/etc.
        //         }
        //     }
        // }
    }
}