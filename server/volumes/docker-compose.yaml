#docker -d ->detach mode : see all logs in console
#docker compose up -d redis mongodb posgres rabbitmq elasticsearch kibana

# version: '3.9'

services:
  redis:
    container_name: redis_container #locally enter the contaier with this name
    image: redis:alpine #lightweigh version
    restart: always
    ports:
      #insideContainer port: outsideContainer port (we use to access the container)
      - '6379:6379'
    command: redis-server --loglevel warning
     #when we run redis localy (DB) the data must be store somewhere -> In Volumes
    #volumes like storage -> where the data is stored
    volumes:
    #locate 'docker-volumes/cache:' and map it to :/data
    #the docker-volumes and /cache/ will be created on service run (we don't need to create it)
      - ./docker-volumes/cache:/data
    #/data we get from redit and want to map it to the '/docker-volumes/cache' on local machine
  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports: 
     - 27017:27017
    volumes:
        #this /data: could be anything (we name it 'data')
      - ./docker-volumes/data:/data/db

  postgres:
    container_name: postgres_container
    image: postgres
    restart: always
    environment:
     - POSTGRES_USER=growvia
     - POSTGRES_PASSWORD=growviapass
     - POSTGRES_DB=intiall_db
    ports:
      - '5432:5432'
    volumes:
     - ./docker-volumes/postgres:/var/lib/postgresql
    networks:
      - default  # Ensure it's on the same network as authentication

  #not storing any data -no volumes 
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:4.0.5-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=growvia
      - RABBITMQ_DEFAULT_PASS=growviapassword
    ports:
      #AMQP protocol port (to access from The app)
      - '5672:5672'
      #management port (to access Management UI )
      - '15672:15672'

  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node #sufficient for local dev
      xpack.security.enabled: "false" #security requeries to have a valid SSL sertificate ->HTTPS (no for local dev)
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
    ports:
      - 9300:9300 # this is for another node (When isn't discovery.type: single-node)
      - 9200:9200 #Access elasticsearch api  
    volumes:
     - ./docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
  
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.17.0
    # image: docker.elastic.co/kibana/kibana:8.11.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"] #form this kibana will get access to this service -> elasticsearch_container 
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro #:ro -> readOnly
    depends_on:
      - elasticsearch #start only when elasticSearch running

  gateway:
    container_name: gateway_container
    build:
      context: ../microservices/gateway 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4000:4000
    env_file: ../microservices/gateway/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      # - ELASTICSEARCH_URL=http://localhost:9200
      # - ELASTICSEARCH_URL=http://elasticsearch_container:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      # - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@localhost:5672
      # - REDIS_HOST=redis://localhost:6379  
      # - REDIS_HOST=redis://redis_container:6379 
      - REDIS_HOST=redis://redis:6379 
      - GATEWAY_JTW_TOKEN = 294bc0dd5baab813c5f762c3a8bba157  
      - JWT_TOKEN=0c41cc5c3479d16cb278d5e066b7ff5c
      - FIRST_SECRET_KEY= 10dc0da8b2dd041b78a828551ca73ca0
      - SECOND_SECRET_KEY= a27f3f722435720dd5758bbf02e6055c
      # - AUTH_SERVICE_URL= http://localhost:4002
      # - AUTH_SERVICE_URL= http://authentication_container:4002
      - AUTH_SERVICE_URL= http://authentication:4002
      - USER_SERVICE_URL= http://user:4003
      - PRODUCT_SERVICE_URL= http://product:4004
      - ORDER_SERVICE_URL= http://order:4005
      - PAYMENT_SERVICE_URL= http://payment:4006
    depends_on: 
      - elasticsearch 

  notification:
    container_name: notification_container
    build:
      context: ../microservices/notification 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4001:4001
    env_file: ../microservices/notification/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      # - ELASTICSEARCH_URL=http://localhost:9200 instead of 'localhost' use 'elasticsearch_container'
      # - ELASTICSEARCH_URL=http://elasticsearch_container:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      - DATABASE_URL=mongodb://mongodb/notification
      # - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@localhost:5672
      - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@rabbitmq_container:5672
      - TEST_EMAIL_NAME = Danika Price
      - TEST_EMAIL = danika.price93@ethereal.email
      - TEST_EMAIL_PASSWORD = AS8nZBfGXdDVhGvXh3
    depends_on: 
      - elasticsearch 

  authentication:
    container_name: authentication_container
    build:
      context: ../microservices/authentication 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4002:4002
    env_file: ../microservices/authentication/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      - API_GATEWAY_URL=http://localhost:4000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@rabbitmq_container:5672
      - REDIS_HOST=redis://localhost:6379
      # - POSTGRESQL_HOST = postgres_container #pc ip address(should be liked)
      - POSTGRESQL_HOST = postgres #recommended postgres service name (the container_name should be use as well)
      - POSTGRESQL_USER = growvia
      - POSTGRESQL_PASSWORD = growviapass
      - POSTGRESQL_NAME = auth_service
      - CLOUDINARY_NAME=
      - CLOUDINARY_API_KEY=
      - CLOUDINARY_API_SECRET=
      - GATEWAY_JWT_TOKEN = 294bc0dd5baab813c5f762c3a8bba157  #MD5 Hash   
      - JWT_TOKEN=0c41cc5c3479d16cb278d5e066b7ff5c
    depends_on: 
      - elasticsearch
      - postgres 
      - rabbitmq
    networks:
      - elastic
      - default  # Ensure it's on the same network as authentication

  user:
    container_name: user_container
    build:
      context: ../microservices/users 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4003:4003
    env_file: ../microservices/users/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      - API_GATEWAY_URL=http://localhost:4000
      # - ELASTICSEARCH_URL=http://localhost:9200 instead of 'localhost' use 'elasticsearch_container'
      # - ELASTICSEARCH_URL=http://elasticsearch_container:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      - DATABASE_URL=mongodb://mongodb/users
      - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@rabbitmq_container:5672
      - REDIS_HOST=redis://localhost:6379
      - CLOUDINARY_NAME=
      - CLOUDINARY_API_KEY=
      - CLOUDINARY_API_SECRET=
      - GATEWAY_JWT_TOKEN = 294bc0dd5baab813c5f762c3a8bba157  #MD5 Hash   
      - JWT_TOKEN=0c41cc5c3479d16cb278d5e066b7ff5c
    depends_on: 
      - elasticsearch
      - postgres 
      - rabbitmq
    networks:
      - elastic
      - default  # Ensure it's on the same network as authentication

  product:
    container_name: product_container
    build:
      context: ../microservices/product 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4004:4004
    env_file: ../microservices/product/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      - API_GATEWAY_URL=http://localhost:4000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      - DATABASE_URL=mongodb://mongodb/products
      - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@rabbitmq_container:5672
      - REDIS_HOST=redis://redis:6379
      - CLOUDINARY_NAME=
      - CLOUDINARY_API_KEY=
      - CLOUDINARY_API_SECRET=
      - GATEWAY_JWT_TOKEN = 294bc0dd5baab813c5f762c3a8bba157  #MD5 Hash   
      - JWT_TOKEN=0c41cc5c3479d16cb278d5e066b7ff5c
    depends_on: 
      - elasticsearch
    networks:
      - elastic
      - default  # Ensure it's on the same network as authentication


  order:
    container_name: order_container
    build:
      context: ../microservices/order 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4005:4005
    env_file: ../microservices/order/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      - API_GATEWAY_URL=http://localhost:4000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@rabbitmq_container:5672
      - REDIS_HOST=redis://redis:6379
      - POSTGRESQL_HOST = postgre
      - POSTGRESQL_USER = growvia
      - POSTGRESQL_PASSWORD = growviapass
      - POSTGRESQL_NAME = order_service
      - GATEWAY_JWT_TOKEN = 294bc0dd5baab813c5f762c3a8bba157  #MD5 Hash   
      - JWT_TOKEN=0c41cc5c3479d16cb278d5e066b7ff5c
    depends_on: 
      - elasticsearch
      - postgres 
    networks:
      - elastic
      - default  # Ensure it's on the same network as authentication

  payment:
    container_name: payment_container
    build:
      context: ../microservices/payment 
      dockerfile: Dockerfile.dev
    restart: always
    ports: 
      - 4006:4006
    env_file: ../microservices/payment/.env
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000 
      - API_GATEWAY_URL=http://localhost:4000
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_APM_SERVER_URL=http//localhost:8200
      - ELASTICSEARCH_APM_TOKEN=
      - RABBITMQ_AMQP_ENDPOINT=amqp://growvia:growviapassword@rabbitmq_container:5672
      - STRIPE_SECRET_KEY= sk_test_51R3HICGDD69JuV4mRnSDxfiGenqITBbaZPzQB4jRjxXQywtkhJFcSABiuJTNtwC6KFSSqoPjlz6ImfB5DfRotRlD00OV0AyW4u
      - GATEWAY_JWT_TOKEN = 294bc0dd5baab813c5f762c3a8bba157  #MD5 Hash   
      - JWT_TOKEN=0c41cc5c3479d16cb278d5e066b7ff5c
    depends_on: 
      - elasticsearch
      - postgres 
    networks:
      - elastic
      - default  # Ensure it's on the same network as authentication
      

networks:
  elastic:
    name: elastic