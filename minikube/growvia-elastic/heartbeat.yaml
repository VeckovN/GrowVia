apiVersion: v1
kind: ServiceAccount
metadata:
  name: heartbeat
  namespace: production
  labels:
    k8s-app: heartbeat
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: heartbeat
  labels:
    k8s-app: heartbeat
rules:
- apiGroups: [""]
  #service account have access to these:
  resources:
  - nodes
  - namespaces
  - pods
  - services
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
    - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
    - jobs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: heartbeat
  #the namespace  from heartbeat (service account) -> above
  namespace: production
  labels:
    k8s-app: heartbeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
#Role -> namespace based
kind: Role 
metadata:
  name: heartbeat-kubeadm-config
  namespace: production
  labels:
    k8s-app: heartbeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: heartbeat
subjects:
- kind: ServiceAccount
  name: heartbeat
  namespace: production
roleRef:
  kind: ClusterRole
  name: heartbeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: heartbeat
  namespace: production
subjects:
  - kind: ServiceAccount
    name: heartbeat
    namespace: production
roleRef:
  kind: Role
  name: heartbeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: heartbeat-kubeadm-config
  namespace: production
subjects:
  - kind: ServiceAccount
    name: heartbeat
    namespace: production
roleRef:
  kind: Role
  name: heartbeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: heartbeat-config
  namespace: production
  labels:
    k8s-app: heartbeat
data:
  heartbeat.yml: |-
    heartbeat.monitors:
      - type: http
        id: growvia-api-gateway
        name: Growvia API Gateway Service
        #send beat on every 5s
        schedule: '@every 5s'
        #in kubernetes cluster the service name will be used instead of IP o docker_container
        hosts: ["http://growvia-gateway.production.svc.cluster.local:4000/gateway-health"]
        check.request.method: GET
        check.response.status: [200]

      - type: http
        id: growvia-notification
        name: Growvia Notification Service
        schedule: '@every 5s'
        hosts: ["http://growvia-notification.production.svc.cluster.local:4001/notification-health"]
        check.request.method: GET
        check.response.status: [200]

      - type: http
        id: growvia-auth
        name: Growvia Auth Service
        schedule: '@every 5s'
        hosts: ["http://growvia-authentication.production.svc.cluster.local:4002/auth-health"]
        check.request.method: GET
        check.response.status: [200]

      - type: http
        id: growvia-users
        name: Growvia Users Service
        schedule: '@every 5s'
        hosts: ["http://growvia-users.production.svc.cluster.local:4003/users-health"]
        check.request.method: GET
        check.response.status: [200]

      - type: http
        id: growvia-product
        name: Growvia Product Service
        schedule: '@every 5s'
        hosts: ["http://growvia-product.production.svc.cluster.local:4004/product-health"]
        check.request.method: GET
        check.response.status: [200]

      - type: http
        id: growvia-order
        name: Growvia Order Service
        schedule: '@every 5s'
        hosts: ["http://growvia-order.production.svc.cluster.local:4005/order-health"]
        check.request.method: GET
        check.response.status: [200]

      - type: http
        id: growvia-payment
        name: Growvia Payment Service
        schedule: '@every 5s'
        hosts: ["http://growvia-payment.production.svc.cluster.local:4006/payment-health"]
        check.request.method: GET
        check.response.status: [200]

    processors:
    - add_cloud_metadata: ~
    - add_docker_metadata: ~

    monitoring.enabled: true
 
    #(But the value will get from .env variables that is defined below in Development.yaml ->
    output.elasticsearch:
      hosts: ['${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}']
      username: ${ELASTICSEARCH_USERNAME}
      password: ${ELASTICSEARCH_PASSWORD}
---
# Use a Deployment to run a single Metricbeat instance in the cluster.
# Suitable for collecting metrics from cluster-wide sources like kube-state-metrics.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: heartbeat
  namespace: production
  labels:
    k8s-app: heartbeat
spec:
  selector:
    matchLabels:
      k8s-app: heartbeat
  template:
    metadata:
      labels:
        k8s-app: heartbeat
    spec:
      serviceAccountName: heartbeat
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: heartbeat
        image: docker.elastic.co/beats/heartbeat:8.18.0
        args: [
          "-c", "/usr/share/heartbeat/heartbeat.yml",
          "-e",
        ]
        env:
        - name: ELASTICSEARCH_PORT
          value: "9200"
        - name: ELASTICSEARCH_HOST
          valueFrom:
            secretKeyRef:
              name: secret-data
              key: growvia-elastic-host
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: secret-data
              key: growvia-elastic-username
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secret-data
              key: growvia-elastic-password
        #For AWS configuration
        # - name: ELASTIC_CLOUD_ID
        #   valueFrom:
        #     secretKeyRef:
        #       name: secret
        #       key: secret-key
        # - name: ELASTIC_CLOUD_AUTH
        #   valueFrom:
        #     secretKeyRef:
        #       name: jsecret
        #       key: secret-key
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
        resources:
          limits:
            memory: 1536Mi
            cpu: 2000m 
          requests:
            # for synthetics, 2 full cores is a good starting point for relatively consistent perform of a single concurrent check
            # For lightweight checks as low as 100m is fine
            cpu: 100m 
            # A high value like this is encouraged for browser based monitors. 
            # Lightweight checks use substantially less, even 128Mi is fine for those.
            memory: 150Mi 
        volumeMounts:
        - name: config
          mountPath: /usr/share/heartbeat/heartbeat.yml
          readOnly: true
          subPath: heartbeat.yml
        - name: data
          mountPath: /usr/share/heartbeat/data
      volumes:
      - name: config
        configMap:
          defaultMode: 0600
          name: heartbeat-config
      - name: data
        hostPath:
          path: /var/lib/heartbeat-data
          type: DirectoryOrCreate

---